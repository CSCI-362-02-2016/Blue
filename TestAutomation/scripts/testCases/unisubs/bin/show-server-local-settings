#!/usr/bin/env python

import os
import sys

import boto
from boto.s3.key import Key

VALID_SETTINGS_REV = [
    'staging',
    'production',
]

def print_usage_and_quit():
    print 'show-server-local-settings staging|production'
    if not deploy_keys_valid():
        print
        print 'before this command runs you need to set up a file called '
        print '.deploy_keys in the git root directory that looks like: '
        print "AWS_ACCESS_ID = '<access-id>'"
        print "AWS_SECRET_KEY = '<secret-key>'"
    sys.exit(1)

def get_deploy_keys():
    rootdir = os.path.dirname(os.path.dirname(__file__))
    deploy_keys = {}
    deploy_key_path = os.path.join(rootdir, '.deploy_keys')
    execfile(deploy_key_path, deploy_keys)
    return deploy_keys

def deploy_keys_valid():
    try:
        get_deploy_keys()
        return True
    except StandardError:
        return False

def main(args):
    try:
        settings_rev = args[1]
    except IndexError:
        print_usage_and_quit()
    if settings_rev not in VALID_SETTINGS_REV:
        print_usage_and_quit()

    deploy_keys = get_deploy_keys()
    conn = boto.connect_s3(deploy_keys['AWS_ACCESS_ID'],
                           deploy_keys['AWS_SECRET_KEY'])
    bucket = conn.get_bucket('amara')
    key = Key(bucket)
    key.name = 'settings/%s/server_local_settings.py' % (settings_rev,)
    print key.get_contents_as_string()

if __name__ == '__main__':
    main(sys.argv)
